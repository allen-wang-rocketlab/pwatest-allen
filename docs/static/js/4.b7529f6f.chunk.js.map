{"version":3,"sources":["components/Video/Video.js"],"names":["Video","useState","useEffect","selectedDeviceId","codeReader","BrowserQRCodeReader","console","log","getVideoInputDevices","then","videoInputDevices","sourceSelect","document","getElementById","deviceId","length","forEach","element","sourceOption","createElement","text","label","value","appendChild","onchange","style","display","addEventListener","decodeFromVideoDevice","result","err","textContent","NotFoundException","error","reset","catch","className","id","width","height","border","htmlFor","maxWidth"],"mappings":"gKAiJeA,UA5ID,WAAO,IAAD,EACgBC,oBAAS,GADzB,gCAEkBA,oBAAS,IAF3B,gCAGYA,mBAAS,OAHrB,gCAI8BA,oBAAS,IAJvC,6BA2GlB,OAtDAC,qBAAU,WACR,IAAIC,EACEC,EAAa,IAAIC,sBACvBC,QAAQC,IAAI,iCACZH,EACGI,uBACAC,MAAK,SAAAC,GACJ,IAAMC,EAAeC,SAASC,eAAe,iBAC7CV,EAAmBO,EAAkB,GAAGI,SACpCJ,EAAkBK,QAAU,KAC9BL,EAAkBM,SAAQ,SAAAC,GACxB,IAAMC,EAAeN,SAASO,cAAc,UAC5CD,EAAaE,KAAOH,EAAQI,MAC5BH,EAAaI,MAAQL,EAAQH,SAC7BH,EAAaY,YAAYL,MAE3BP,EAAaa,SAAW,WACtBrB,EAAmBQ,EAAaW,OAERV,SAASC,eACjC,qBAEgBY,MAAMC,QAAU,SAEpCd,SAASC,eAAe,eAAec,iBAAiB,SAAS,WAC/DvB,EAAWwB,sBACTzB,EACA,SACA,SAAC0B,EAAQC,GACHD,IACFvB,QAAQC,IAAIsB,GACZjB,SAASC,eAAe,UAAUkB,YAAcF,EAAOT,OAErDU,GAASA,aAAeE,sBAC1B1B,QAAQ2B,MAAMH,GACdlB,SAASC,eAAe,UAAUkB,YAAcD,MAItDxB,QAAQC,IAAR,uDACkDJ,OAGpDS,SAASC,eAAe,eAAec,iBAAiB,SAAS,WAC/DvB,EAAW8B,QACXtB,SAASC,eAAe,UAAUkB,YAAc,GAChDzB,QAAQC,IAAI,gBAGf4B,OAAM,SAAAL,GACLxB,QAAQ2B,MAAMH,QAEjB,IAGD,6BACE,6BACE,wBAAIM,UAAU,SAAd,kBAEA,6BACE,4BAAQC,GAAG,eAAX,SACA,4BAAQA,GAAG,eAAX,UAGF,6BACE,2BACEA,GAAG,QACHC,MAAM,OACNC,OAAO,OACPd,MAAO,CAAEe,OAAQ,qBAIrB,yBAAKH,GAAG,oBAAoBZ,MAAO,CAAEC,QAAS,SAC5C,2BAAOe,QAAQ,gBAAf,wBACA,4BAAQJ,GAAG,eAAeZ,MAAO,CAAEiB,SAAU,YAG/C,0CACA,6BACE,2BAAOL,GAAG","file":"static/js/4.b7529f6f.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserQRCodeReader, NotFoundException } from \"@zxing/library\";\n\nimport VideoSkeleton from \"./Video.skeleton\";\n\nconst Video = () => {\n  const [videoInit, setVideoInit] = useState(false);\n  const [videoError, setVideoError] = useState(false);\n  const [barcode, setBarcode] = useState(null);\n  const [cameraFacingUser, setCameraFacingUser] = useState(true);\n\n  // const onInitSuccess = () => {\n  //   Quagga.start();\n  //   setVideoInit(true);\n  // }\n\n  // const onDetected = (result) => {\n  //   Quagga.offDetected(onDetected);\n  //   setBarcode(result.codeResult.code);\n  //   // do the API stuff\n  // }\n\n  // const switchCameraHandler = () => {\n  //   Quagga.pause();\n  //   setCameraFacingUser(!cameraFacingUser);\n  //   Quagga.start();\n  //   setVideoInit(true);\n  //   console.log(cameraFacingUser)\n  // }\n\n  // useEffect(() => {\n  //   if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n  //     Quagga.init({\n  //       inputStream: {\n  //         name: \"Live\",\n  //         type: \"LiveStream\",\n  //         target: document.querySelector('#video'),\n  //         constraints: {\n  //           width: 900,\n  //           height: 300,\n  //           facingMode: cameraFacingUser ? \"user\" : \"environment\"\n  //         }\n  //       },\n  //       numOfWorkers: 1,\n  //       locate: true,\n  //       decoder: {\n  //         readers: ['ean_reader', 'ean_8_reader', 'upc_reader', 'code_128_reader']\n  //       }\n  //     }, (err) => {\n  //       if (err) {\n  //         setVideoError(true);\n  //         return;\n  //       }\n  //       onInitSuccess();\n  //     });\n  //     Quagga.onDetected(onDetected);\n  //   }\n  // }, []);\n  useEffect(() => {\n    let selectedDeviceId;\n    const codeReader = new BrowserQRCodeReader();\n    console.log(\"ZXing code reader initialized\");\n    codeReader\n      .getVideoInputDevices()\n      .then(videoInputDevices => {\n        const sourceSelect = document.getElementById(\"sourceSelect\");\n        selectedDeviceId = videoInputDevices[0].deviceId;\n        if (videoInputDevices.length >= 1) {\n          videoInputDevices.forEach(element => {\n            const sourceOption = document.createElement(\"option\");\n            sourceOption.text = element.label;\n            sourceOption.value = element.deviceId;\n            sourceSelect.appendChild(sourceOption);\n          });\n          sourceSelect.onchange = () => {\n            selectedDeviceId = sourceSelect.value;\n          };\n          const sourceSelectPanel = document.getElementById(\n            \"sourceSelectPanel\"\n          );\n          sourceSelectPanel.style.display = \"block\";\n        }\n        document.getElementById(\"startButton\").addEventListener(\"click\", () => {\n          codeReader.decodeFromVideoDevice(\n            selectedDeviceId,\n            \"video\",\n            (result, err) => {\n              if (result) {\n                console.log(result);\n                document.getElementById(\"result\").textContent = result.text;\n              }\n              if (err && !(err instanceof NotFoundException)) {\n                console.error(err);\n                document.getElementById(\"result\").textContent = err;\n              }\n            }\n          );\n          console.log(\n            `Started continous decode from camera with id ${selectedDeviceId}`\n          );\n        });\n        document.getElementById(\"resetButton\").addEventListener(\"click\", () => {\n          codeReader.reset();\n          document.getElementById(\"result\").textContent = \"\";\n          console.log(\"Reset.\");\n        });\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  }, []);\n\n  return (\n    <div>\n      <div>\n        <h1 className=\"title\">Scan a product</h1>\n\n        <div>\n          <button id=\"startButton\">Start</button>\n          <button id=\"resetButton\">Reset</button>\n        </div>\n\n        <div>\n          <video\n            id=\"video\"\n            width=\"100%\"\n            height=\"auto\"\n            style={{ border: \"1px solid gray\" }}\n          ></video>\n        </div>\n\n        <div id=\"sourceSelectPanel\" style={{ display: \"none\" }}>\n          <label htmlFor=\"sourceSelect\">Change video source:</label>\n          <select id=\"sourceSelect\" style={{ maxWidth: \"400px\" }}></select>\n        </div>\n\n        <label>Result:</label>\n        <div>\n          <label id=\"result\"></label>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Video;\n"],"sourceRoot":""}