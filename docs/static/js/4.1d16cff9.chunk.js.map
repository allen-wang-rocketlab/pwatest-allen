{"version":3,"sources":["components/Video/Video.js"],"names":["Video","selectedDeviceId","useState","codeReader","BrowserQRCodeReader","console","log","getVideoInputDevices","then","videoInputDevices","sourceSelect","document","getElementById","deviceId","length","forEach","element","sourceOption","createElement","text","label","value","appendChild","onchange","style","display","addEventListener","decodeFromVideoDevice","result","err","textContent","reset","catch","error","className","id","width","height","border","htmlFor","maxWidth"],"mappings":"gKAkJeA,UA7ID,WAAO,IAsDfC,EAtDc,EACgBC,oBAAS,GADzB,gCAEkBA,oBAAS,IAF3B,gCAGYA,mBAAS,OAHrB,gCAI8BA,oBAAS,IAJvC,mBAuDZC,GAvDY,UAuDC,IAAIC,uBAiDvB,OAhDAC,QAAQC,IAAI,iCACZH,EACGI,uBACAC,MAAK,SAAAC,GACJ,IAAMC,EAAeC,SAASC,eAAe,iBAC7CX,EAAmBQ,EAAkB,GAAGI,SACpCJ,EAAkBK,QAAU,KAC9BL,EAAkBM,SAAQ,SAAAC,GACxB,IAAMC,EAAeN,SAASO,cAAc,UAC5CD,EAAaE,KAAOH,EAAQI,MAC5BH,EAAaI,MAAQL,EAAQH,SAC7BH,EAAaY,YAAYL,MAE3BP,EAAaa,SAAW,WACtBtB,EAAmBS,EAAaW,OAERV,SAASC,eAAe,qBAChCY,MAAMC,QAAU,SAEpCd,SAASC,eAAe,eAAec,iBAAiB,SAAS,WAC/DvB,EAAWwB,sBACT1B,EACA,SACA,SAAC2B,EAAQC,GACHD,IACFvB,QAAQC,IAAIsB,GACZjB,SAASC,eAAe,UAAUkB,YAAcF,EAAOT,SAQ7Dd,QAAQC,IAAR,uDACkDL,OAGpDU,SAASC,eAAe,eAAec,iBAAiB,SAAS,WAC/DvB,EAAW4B,QACXpB,SAASC,eAAe,UAAUkB,YAAc,GAChDzB,QAAQC,IAAI,gBAGf0B,OAAM,SAAAH,GACLxB,QAAQ4B,MAAMJ,MAIhB,6BACE,6BACE,wBAAIK,UAAU,SAAd,kBAEA,6BACE,4BAAQC,GAAG,eAAX,SAGA,4BAAQA,GAAG,eAAX,UAKF,6BACE,2BACEA,GAAG,QACHC,MAAM,MACNC,OAAO,MACPb,MAAO,CAACc,OAAQ,qBAIpB,yBAAKH,GAAG,oBAAoBX,MAAO,CAACC,QAAS,SAC3C,2BAAOc,QAAQ,gBAAf,wBACA,4BAAQJ,GAAG,eAAeX,MAAO,CAACgB,SAAU,YAG9C,0CACA,6BACE,0BAAML,GAAG","file":"static/js/4.1d16cff9.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserQRCodeReader } from \"@zxing/library\";\n\nimport VideoSkeleton from \"./Video.skeleton\";\n\nconst Video = () => {\n  const [videoInit, setVideoInit] = useState(false);\n  const [videoError, setVideoError] = useState(false);\n  const [barcode, setBarcode] = useState(null);\n  const [cameraFacingUser, setCameraFacingUser] = useState(true);\n\n  // const onInitSuccess = () => {\n  //   Quagga.start();\n  //   setVideoInit(true);\n  // }\n\n  // const onDetected = (result) => {\n  //   Quagga.offDetected(onDetected);\n  //   setBarcode(result.codeResult.code);\n  //   // do the API stuff\n  // }\n\n  // const switchCameraHandler = () => {\n  //   Quagga.pause();\n  //   setCameraFacingUser(!cameraFacingUser);\n  //   Quagga.start();\n  //   setVideoInit(true);\n  //   console.log(cameraFacingUser)\n  // }\n\n  // useEffect(() => {\n  //   if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n  //     Quagga.init({\n  //       inputStream: {\n  //         name: \"Live\",\n  //         type: \"LiveStream\",\n  //         target: document.querySelector('#video'),\n  //         constraints: {\n  //           width: 900,\n  //           height: 300,\n  //           facingMode: cameraFacingUser ? \"user\" : \"environment\"\n  //         }\n  //       },\n  //       numOfWorkers: 1,\n  //       locate: true,\n  //       decoder: {\n  //         readers: ['ean_reader', 'ean_8_reader', 'upc_reader', 'code_128_reader']\n  //       }\n  //     }, (err) => {\n  //       if (err) {\n  //         setVideoError(true);\n  //         return;\n  //       }\n  //       onInitSuccess();\n  //     });\n  //     Quagga.onDetected(onDetected);\n  //   }\n  // }, []);\n\n  let selectedDeviceId;\n  const codeReader = new BrowserQRCodeReader();\n  console.log(\"ZXing code reader initialized\");\n  codeReader\n    .getVideoInputDevices()\n    .then(videoInputDevices => {\n      const sourceSelect = document.getElementById(\"sourceSelect\");\n      selectedDeviceId = videoInputDevices[0].deviceId;\n      if (videoInputDevices.length >= 1) {\n        videoInputDevices.forEach(element => {\n          const sourceOption = document.createElement(\"option\");\n          sourceOption.text = element.label;\n          sourceOption.value = element.deviceId;\n          sourceSelect.appendChild(sourceOption);\n        });\n        sourceSelect.onchange = () => {\n          selectedDeviceId = sourceSelect.value;\n        };\n        const sourceSelectPanel = document.getElementById(\"sourceSelectPanel\");\n        sourceSelectPanel.style.display = \"block\";\n      }\n      document.getElementById(\"startButton\").addEventListener(\"click\", () => {\n        codeReader.decodeFromVideoDevice(\n          selectedDeviceId,\n          \"video\",\n          (result, err) => {\n            if (result) {\n              console.log(result);\n              document.getElementById(\"result\").textContent = result.text;\n            }\n            // if (err && !(err instanceof ZXing.NotFoundException)) {\n            //   console.error(err);\n            //   document.getElementById(\"result\").textContent = err;\n            // }\n          }\n        );\n        console.log(\n          `Started continous decode from camera with id ${selectedDeviceId}`\n        );\n      });\n      document.getElementById(\"resetButton\").addEventListener(\"click\", () => {\n        codeReader.reset();\n        document.getElementById(\"result\").textContent = \"\";\n        console.log(\"Reset.\");\n      });\n    })\n    .catch(err => {\n      console.error(err);\n    });\n\n  return (\n    <div>\n      <div>\n        <h1 className=\"title\">Scan a product</h1>\n\n        <div>\n          <button id=\"startButton\">\n            Start\n          </button>\n          <button id=\"resetButton\">\n            Reset\n          </button>\n        </div>\n\n        <div>\n          <video\n            id=\"video\"\n            width=\"300\"\n            height=\"200\"\n            style={{border: \"1px solid gray\"}}\n          ></video>\n        </div>\n\n        <div id=\"sourceSelectPanel\" style={{display: \"none\"}}>\n          <label htmlFor=\"sourceSelect\">Change video source:</label>\n          <select id=\"sourceSelect\" style={{maxWidth: \"400px\"}}></select>\n        </div>\n\n        <label>Result:</label>\n        <pre>\n          <code id=\"result\"></code>\n        </pre>\n      </div>\n    </div>\n  );\n};\n\nexport default Video;\n"],"sourceRoot":""}